// <auto-generated />
using System;
using DHIS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DHIS.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190906120316_mig73")]
    partial class mig73
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DHIS.Data.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("IPAddress");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("DHIS.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AccountType");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DHIS.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("Text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("Text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("Varchar(100)");

                    b.Property<int>("HosptalDoctorID");

                    b.Property<string>("IDNumber")
                        .IsRequired()
                        .HasColumnType("Varchar(100)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("Text");

                    b.Property<string>("Userid");

                    b.HasKey("DoctorID");

                    b.HasIndex("HosptalDoctorID");

                    b.ToTable("Doctor","dbo");
                });

            modelBuilder.Entity("DHIS.Models.Hospital", b =>
                {
                    b.Property<int>("HospitalID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HospitalName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("HospitalID");

                    b.ToTable("Hospital","dbo");
                });

            modelBuilder.Entity("DHIS.Models.Medicine", b =>
                {
                    b.Property<int>("MedicineID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DiseaseCured")
                        .IsRequired()
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("MedicineCode")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MedicineName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PharmacyMedicID");

                    b.Property<double>("Quantity");

                    b.HasKey("MedicineID");

                    b.HasIndex("MedicineCode")
                        .IsUnique();

                    b.HasIndex("PharmacyMedicID");

                    b.ToTable("Medicine","dbo");
                });

            modelBuilder.Entity("DHIS.Models.Patient", b =>
                {
                    b.Property<int>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CellphoneNumber")
                        .IsRequired()
                        .HasColumnType("Varchar(100)");

                    b.Property<string>("Created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created_on");

                    b.Property<string>("DOB")
                        .IsRequired()
                        .HasColumnType("Varchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("Text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("Varchar(100)");

                    b.Property<string>("IDNumber")
                        .IsRequired()
                        .HasColumnType("Varchar(100)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("Text");

                    b.Property<string>("Modified_by")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Modified_on");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("Text");

                    b.Property<string>("NextOfKin")
                        .IsRequired()
                        .HasColumnType("Varchar(100)");

                    b.Property<string>("NextOfKinCell")
                        .IsRequired()
                        .HasColumnType("Varchar(100)");

                    b.Property<string>("PostalAddress")
                        .IsRequired()
                        .HasColumnType("Text");

                    b.Property<string>("ResidentialAddress")
                        .IsRequired()
                        .HasColumnType("Text");

                    b.HasKey("PatientID");

                    b.HasIndex("IDNumber")
                        .IsUnique();

                    b.ToTable("Patient","dbo");
                });

            modelBuilder.Entity("DHIS.Models.Pharmacy", b =>
                {
                    b.Property<int>("PharmacyID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PharmancyName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("PharmacyID");

                    b.ToTable("Pharmacy","dbo");
                });

            modelBuilder.Entity("DHIS.Models.Prescription", b =>
                {
                    b.Property<int>("PrescriptionID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created_on");

                    b.Property<string>("Diagonosis")
                        .IsRequired()
                        .HasColumnType("Text");

                    b.Property<string>("DiagonosisBy")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Idnumber")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Modified_by")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Modified_on");

                    b.Property<bool>("PrescriptionCollected");

                    b.Property<string>("PrescriptionNotes")
                        .IsRequired()
                        .HasColumnType("Text");

                    b.Property<int>("PrescriptionPatientID");

                    b.HasKey("PrescriptionID");

                    b.HasIndex("PrescriptionPatientID");

                    b.ToTable("Prescription","dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DHIS.Models.Doctor", b =>
                {
                    b.HasOne("DHIS.Models.Hospital", "HospitalInfo")
                        .WithMany()
                        .HasForeignKey("HosptalDoctorID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DHIS.Models.Medicine", b =>
                {
                    b.HasOne("DHIS.Models.Pharmacy", "PharmacyInfo")
                        .WithMany()
                        .HasForeignKey("PharmacyMedicID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DHIS.Models.Prescription", b =>
                {
                    b.HasOne("DHIS.Models.Patient", "PatientInfo")
                        .WithMany()
                        .HasForeignKey("PrescriptionPatientID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("DHIS.Data.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DHIS.Data.ApplicationUser")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DHIS.Data.ApplicationUser")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("DHIS.Data.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DHIS.Data.ApplicationUser")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DHIS.Data.ApplicationUser")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
